#!/usr/bin/env python

import argparse
import jackhammer

from jackhammer.utils.user import user_exists, user_utility

from jackhammer.tasks.cli import create_env, remove_env, create_user_if_not_exists

from fabric.operations import prompt

parser = argparse.ArgumentParser()

parser.add_argument("crud",   choices=["create", "remove"], help="crud operation to perform")
parser.add_argument("entity", choices=["env"],              help="env only for now")

parser.add_argument("--user",         required=True,                                                   help="username, may or may not be required depending crud/entity")
parser.add_argument("--project",      required=True,                                                   help="project to use from manifest")
parser.add_argument("--type",         required=True, choices=["development", "staging", "production"], help="type of environment")
parser.add_argument("--with-package", choices=["wordpress", "magento", "codeigniter"],                 help="create the environment with a package installed")
parser.add_argument("--url",                                                                           help="url of the environment, used for DB find/replace")
parser.add_argument("--checkout",     action="store_true",                                             help="pass to do an svn checkout of the repos defined in the project")
parser.add_argument("--pull-db",      action="store_true",                                             help="pulls the database from the next highest environment")
parser.add_argument("--preserve-db",  action="store_true",                                             help="for removing envs - will preserve the database")

args = parser.parse_args()

"""
jh create env
jh remove env
"""

if args.crud == "create" and args.entity == "env":
    create_user_if_not_exists(args.user)
    create_env(args)
elif args.crud == "remove" and args.entity == "env":
    remove_env(args)
